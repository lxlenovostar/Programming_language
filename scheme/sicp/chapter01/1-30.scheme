(define (cube x) (* x x x))

(define (sum term a next b)
	(if (> a b)
	0
	(+ (term a) (sum term (next a) next b))
    )
)

(define (inc n) (+ n 1))

(define (sum-cubes a b)
	(sum cube a inc b)
)

(define (integral f a b dx)
	(define (add-dx x)
		(+ x dx)
	)
	(* (sum f (+ a (/ dx 2.0)) add-dx b) dx)
)

(define (even? n)
	(= (remainder n 2) 0)
)

(define (odd? n)
	(= (remainder n 2) 1)
)

(define (simpson_integral f a b n)
	(define h (/ (- b a) n))
	
	(define (inc x) (+ x 1))

	(define (y k)
    	(f (+ a (* k h)))
	)
	
	(define (term k)
    	(* (cond ((odd? k) 4)
           ((or (= k 0) (= k n)) 1)
           ((even? k) 2))
       	   (y k)
		 )
	  )

	(define (sum term a next b)
		(if (> a b)
		0
		(+ (term a) (sum term (next a) next b))
    	)
	)

	(define (sum1 term a next b)
		(define (iter a result)
			(if (> a b)
				result
				(iter (next a) (+ result (term a)))
			)
		)
		(iter a 0)
	)

	(* (sum1 term 0 inc n) (/ h 3.0))
)

