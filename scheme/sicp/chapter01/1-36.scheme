(define (close-enough? x y) 
	(< (abs (- x y)) 0.001)
)

(define (average a b) 
	(/ (+ a b) 2)
)

(define tolerance 0.00001)

(define (fixed-point f first-guess)
	(define (close-enough? v1 v2)
		(< (abs (- v1 v2)) tolerance)
	)

	(define (try guess)
		(let ((next (f guess)))
			(if (close-enough? guess next)
				next
				(try next)
			)
		)
	)

	(try first-guess)
)

(define (golden_ratio)
	(fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0)
)

(define (fixed-point-36 f first-guess)
	(define (close-enough? v1 v2)
		(< (abs (- v1 v2)) tolerance)
	)

	(define (try guess)
		(newline)
		(display guess)
		(let ((next (f guess)))
			(if (close-enough? guess next)
				next
				(try next)
			)
		)
	)

	(try first-guess)
)


(define (soulation)
	(fixed-point-36 (lambda (x) (/ (log 1000.0) (log x))) 10.0)
)

(define (soulation_a)
	(fixed-point-36 (lambda (x) (average x (/ (log 1000.0) (log x)))) 10.0)
)
