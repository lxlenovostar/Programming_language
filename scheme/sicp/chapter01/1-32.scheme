(define (compute_c n)
	
	(define (inc2 x) (+ x 2))
	
	(define (term1 k)
		(* k (+ k 2))
	)

	(define (term2 k)
		(* k k)
	)

	(define (sum term a next b)
		(if (> a b)
			0
			(+ (term a) (sum term (next a) next b))
    	)
	)

	(define (sum1 term a next b)
		(define (iter a result)
			(if (> a b)
				result
				(iter (next a) (+ result (term a)))
			)
		)
		(iter a 0)
	)

	(define (product term a next b)
		(if (> a b)
			1.0	
			(* (term a) (product term (next a) next b))
    	)
	)

	(define (product_i term a next b)
		(define (iter a result)
			(if (> a b)
				result 
				(iter (next a) (* result (term a)))
			)
		)

		(iter a 1)
	)

	(define (accumulate_i combiner null-value term a next b) 
		(define (iter a result)
			(if (> a b)
				result
				(iter (next a) (combiner result (term a)))
			)
		)
		(iter a null-value)
	)

	(define (accumulate combiner null-value term a next b) 
		(if (> a b)
			null-value
			(combiner (term a) (accumulate combiner null-value term (next a) next b))
		)
	)

	(define (product_2 term a next b)
		(accumulate_i * 1 term a next b)
	)

	(/ (product_2 term1 2.0 inc2 n) (product_2 term2 3.0 inc2 (+ n 1)))
)

(define (sum_2 term a next b)
	(accumulate + 0 term a next b)
)
