(define (cube x) (* x x x))

(define (sum term a next b)
	(if (> a b)
	0
	(+ (term a) (sum term (next a) next b))
    )
)

(define (inc n) (+ n 1))

(define (sum-cubes a b)
	(sum cube a inc b)
)

(define (integral f a b dx)
	(define (add-dx x)
		(+ x dx)
	)
	(* (sum f (+ a (/ dx 2.0)) add-dx b) dx)
)

(define (even? n)
	(= (remainder n 2) 0)
)

(define (simpson_integral f a b n)
	(define (inc x) (+ x 1))

	(define (next x n count)
		(cond ((= count 0) (+ x (/ (- b a) n))) 
			  ((= count n) (+ x (/ (- b a) n)))
			  ((even? count) (* 2 (+ x (/ (- b a) n))))
			  (else (* 4 (+ x (/ (- b a) n))) )
		)		
	)

	(define (sum term a next b)
		(if (> a b)
			0
		(+ (term a) (sum term (next a n 0) next b))
    	)
	)

	(* (sum f a next b) (/ (/ (- b a) n) 3.0))
)

