(define (smallest-divisor n) 
	(find-divisor n 2)
)

(define (find-divisor n test-divisor)
	(cond ((> (square test-divisor) n) n)
		  ((divides? test-divisor n) test-divisor)
		  (else (find-divisor n (+ test-divisor 1)))
	)
)

(define (divides? a b) 
	(= (remainder b a) 0)
)

(define (prime? n)
	(= n (smallest-divisor n))
)

(define (sum term a next b)
	(if (> a b)
	0
	(+ (term a) (sum term (next a) next b))
	)
)

(define (inc n) (+ n 1))

(define (cube x) (* x x))

(define (sum-cubes a b)
	(sum cube a inc b)
)

(define (filtered-accumulate combiner null-value term a next b) 
	(cond ((> a b) null-value)
		  ((prime? a) (combiner (term a) (filtered-accumulate combiner null-value term (next a) next b)))
		  (else combiner null-value (filtered-accumulate combiner null-value term (next a) next b))
	)
)

(define (sum_2 term a next b)
	(filtered-accumulate + 0 term a next b)
)

(define (sum-cubes2 a b)
	(sum_2 cube a inc b)
)

(define (filtered-accum filter combiner null-value term a next b)
  (if (> a b)
      null-value
      (if (filter a) 		;;如果这里理解的不清楚，可以参考 Figure 1.3, 这里依然是一个尾递归。 
          (combiner (term a) (filtered-accum filter combiner null-value term (next a) next b))
          (filtered-accum filter combiner null-value term (next a) next b)
	  )
  )
)

(define (sum_3 term a next b)
	(filtered-accum prime? + 0 term a next b)
)

(define (sum-cubes3 a b)
	(sum_3 cube a inc b)
)

(define (gcd a b)
	(if (= b 0)
		a 
		(gcd b (remainder a b))
	)
)

(define (sum_2 term a next b)
	(filtered-accumulate + 0 term a next b)
)

(define (get x) x)

(define (product term a next b)
	(define (filter-gcd i)
		(=  (gcd i b) 1)
	)

	(filtered-accum filter-gcd * 1 term a next b)
)

(define (product-gcd a b)
	(product get a inc b)
)
