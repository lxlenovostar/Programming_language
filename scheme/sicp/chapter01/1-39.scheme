
(define (cont-frac n d k)
	(if (= k 1)
		(/ (n k) (d k))
		(/ (n k) (+ (d k) (cont-frac n d (- k 1))))
	)
)

(define (cont-frac-iter n d k)
   (define (frac-iter i result)
       (if (= i 0)
           result
           (frac-iter (- i 1) (/ (n i) (+ (d i) result)))
		)
	)

   (frac-iter (- k 1) (/ (n k) (d k)))
)

(define (iter k)
	(cont-frac-iter (lambda (i) 1.0) (lambda (i) 1.0) k)
)

(define (cont-frac-rec n d k)
	(define (frac i)
    	(if (< i k)
        	(/ (n i) (+ (d i) (frac (+ i 1))))
         	(/ (n i) (d i))
		)
	)
    (frac 1)
)

(define (sou39 x k)
	(define (get i)
   		(if (= i 1)
			x       	
       		(- (square x))
		)
	)

	(cont-frac-rec get (lambda (i) (- (* 2 i) 1.0)) k)
)

(define (square x) (* x x))

(define (tancf_other x k)
	(define (n k)
		(if (= k 1)
			x
			(- (square x))
		)
	)

	(define (d k)
		(- (* 2 k) 1)
	)
	(cont-frac-iter n d k)
)
