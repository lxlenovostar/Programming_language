
(define (cont-frac n d k)
	(if (= k 1)
		(/ (n k) (d k))
		(/ (n k) (+ (d k) (cont-frac n d (- k 1))))
	)
)

(define (cont-frac-rec n d k)
	(define (frac i)
    	(if (< i k)
        	(/ (n i) (+ (d i) (frac (+ i 1))))
         	(/ (n i) (d i))
		)
	)
    (frac 1)
)

(define (cont-frac-iter n d k)
   (define (frac-iter i result)
       (if (= i 0)
           result
           (frac-iter (- i 1) (/ (n i) (+ (d i) result)))
		)
	)

   (frac-iter (- k 1) (/ (n k) (d k)))
)

(define (iter k)
	(cont-frac-iter (lambda (i) 1.0) (lambda (i) 1.0) k)
)
	
(define (remainder2 n)
	(= (remainder n 3) 2)
)

(define (get num)

	(define (ac_get index base result)
	 	(cond ((= (- index 1) num) result)
		      ((remainder2 index) (ac_get (+ index 1) (+ base 1) (* 2 base)))
		      (else (ac_get (+ index 1) base 1))
	 	)
	)

	(ac_get 1 1 1)
)

(define (d i)
   (if (not (= 0 (remainder (+ i 1) 3)))
       1
       (* 2 (/ (+ i 1) 3))
	)
)

(define (sou38 k)
	(cont-frac-iter (lambda (i) 1.0) get k)
)

(define (sou38_other k)
	(cont-frac-iter (lambda (i) 1.0) d k)
)
