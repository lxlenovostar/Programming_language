(define (square n)
	(* n n)

)

(define (map proc items)
     (if (null? items)
          `() 
          (cons (proc (car items))     (map proc (cdr items)))
     )
)

(define (square-list items)
	(if (null? items)
		`()
		(cons (square (car items)) (square-list (cdr items)))
	)
)

(define (square-list1 items)
	(map square items)
)

(define (append list1 list2)
	(if (null? list1)
		list2
		(cons (car list1) (append (cdr list1) list2))
	)
)

(define (square-list-e items)
	(define (iter things answer)
		(if (null? things)
			answer
			(iter (cdr things) (append answer (list (square (car things)))))
		)
	)

	(iter items `())
)
