(define (even? n)
	(= (remainder n 2) 0)

)
(define (check-even-odd n m)
	(= (remainder n 2) (remainder m 2))
)

(define (same-parity value . value-list)
	(define (iter items)
		(cond ((null? items) '())
		  	((check-even-odd value (car items)) (cons (car items) (iter (cdr items))))
		  	(else (iter (cdr items)))
		)
	)

	(cons value (iter value-list))
)

(define (length items)
	(define (length-iter a count)
		(if (null? a)
			count
			(length-iter (cdr a) (+ 1 count))
		)
	)
	(length-iter items 0)
)

(define (append list1 list2)
	(if (null? list1)
		list2
		(cons (car list1) (append (cdr list1) list2))
	)
)

(define (same-parity-other a . z)
   (define (iter items answer)
     (if (null? items)
         answer
         (iter (cdr items)
               (if (= (remainder (car items) 2) (remainder a 2))
                   (append answer (list (car items)))
                   answer
				)
		 )
	 )
	)
   (iter z (list a)))
