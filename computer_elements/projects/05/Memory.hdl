// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // 地址空间大小为：16*1024+8*1024+1, [0, 24576]
    // 地址在[0, 16383]访问 RAM16K
    // 地址在[16384, 24575]访问 Screen
    // 地址在[24576]访问 KDB
    // 最高的两位是00, 01访问RAM16K, 11为键盘， 10为显示器
    DMux4Way(in = load, sel = address[13..14], a = loada, b = loadb, c = loadc, d = loadd);

    Or(a = loada, b = loadb, out = oram);
    RAM16K(in = in, load = oram, address=address[0..13], out = outRam);    // 访问RAM

    Screen(in = in, load = loadc, address=address[0..12], out = outScreen); // 访问屏幕
    Keyboard(out = outK);    // 访问Keyboard

    Mux4Way16(a = outRam, b = outRam, c = outScreen, d = outK, sel = address[13..14], out = out);
}